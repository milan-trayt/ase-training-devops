name: ECS Build And Deploy

on:
  workflow_call:
    inputs:
      AWS_ROLE:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      SECRET_ID:
        required: true
        type: string
      RUN_SCHEMA_MIGRATION:
        type: boolean
        default: true
      ENVIRONMENT:
        required: true
        type: string

jobs:
  build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Fetch and export secrets
        id: fetch_secrets
        run: |
          aws secretsmanager get-secret-value --secret-id ${{ inputs.SECRET_ID }} | jq -r '.SecretString' > secrets.json
          while IFS="=" read -r key value; do
            echo "${key}=${value}" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' secrets.json)

      - name: Docker Login
        run: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REGISTRY_URI}

      - name: Build Image
        run: |
          cd splittr-backend
          docker build . -t ${REGISTRY_URI}/${IMAGE_NAME}:${IMAGE_TAG} --build-arg REGISTRY_URI=${REGISTRY_URI} --build-arg SECRET_PREFIX=${SECRET_PREFIX} --build-arg AWS_REGION=${AWS_REGION}  --build-arg RUN_SCHEMA_MIGRATION=${{ inputs.RUN_SCHEMA_MIGRATION }} --build-arg DATABASE_URL=${DATABASE_URL}

      - name: Push Image
        run: docker push ${REGISTRY_URI}/${IMAGE_NAME}:${IMAGE_TAG}

  deploy_api:
    environment: ${{ inputs.ENVIRONMENT }}
    name: Deploy API
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Fetch and export secrets
        id: fetch_secrets
        run: |
          aws secretsmanager get-secret-value --secret-id ${{ inputs.SECRET_ID }} | jq -r '.SecretString' > secrets.json
          while IFS="=" read -r key value; do
            echo "${key}=${value}" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' secrets.json)

      - name: AWS force deploy the ECS service
        run: |
          set -e

          # AWS CLI force deploy the ECS service
          aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment
